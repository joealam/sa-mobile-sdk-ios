{
    "name": "iOS SDK",
    "text": "<p>The SuperAwesome Mobile SDK (Software Development Kit) lets you to easily add COPPA compliant advertisements and other platform features, like user authentication and registration, to your apps. We try to make integration as easy as possible, so we provide all the necessary tools such as this guide, API documentation, screencasts and demo apps.</p>\n<p>This project is hosted on GitHub: <a href=\"https://github.com/SuperAwesomeLTD/sa-mobile-sdk-ios\">https://github.com/SuperAwesomeLTD/sa-mobile-sdk-ios</a></p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "sections": [
                {
                    "name": "Registering Your App on the Dashboard",
                    "text": "<p>If you haven&#39;t registered your app on the SuperAwesome Dashboard yet, you can do that by going to <a href=\"http://dashboard.superawesome.tv\">http://dashboard.superawesome.tv</a> and creating a new app.</p>\n<p><img src=\"img/dashboard.png\" alt=\"\" title=\"Registering an app on the dashboard\"></p>\n<p>Once your app is registered, you can create placements for it and use the documentation provided below to integrate these placements into your iOS application.</p>\n<p>Additionally, you can use one of the test placements provided below:</p>\n<table>\n<thead>\n<tr>\n<th>Placement ID</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5687</td>\n<td>320x50 banner</td>\n</tr>\n<tr>\n<td>5692</td>\n<td>320x480 interstitial</td>\n</tr>\n<tr>\n<td>5740</td>\n<td>video</td>\n</tr>\n</tbody>\n</table>\n"
                },
                {
                    "name": "Integrating the SDK",
                    "text": "<p>We use <a href=\"http://cocoapods.org\">CocoaPods</a> in order to make installing and updating our SDK super easy. CocoaPods manages library dependencies for your Xcode projects.</p>\n<h3 id=\"installing-cocoapods\">Installing CocoaPods</h3>\n<p>If you don&#39;t have CocoaPods installed on your machine you can install it by using the following command in the comamnd line:</p>\n<pre><code>sudo gem install cocoapods\n</code></pre><p>After that you need to go to the project&#39;s directory and initialize CocoaPods</p>\n<pre><code>cd /project_root\npod init\n</code></pre><h3 id=\"getting-the-sdk\">Getting the SDK</h3>\n<p>The dependencies for your projects are specified in a single text file called a Podfile. CocoaPods will resolve dependencies between libraries, fetch the resulting source code, then link it together in an Xcode workspace to build your project.\nTo download the v2 release of the SDK the following line to your Podfile:</p>\n<pre><code>pod &#39;SuperAwesome&#39;, &#39;2.1.9&#39;\n</code></pre><p>After the pod source has been added, update your project&#39;s dependencies by running the following command in the terminal:</p>\n<pre><code>pod update\n</code></pre><p>Don&#39;t forget to use the .xcworkspace file to open your project in Xcode, instead of the .xcproj file, from here on out.</p>\n"
                },
                {
                    "name": "Including the SDK in your project",
                    "text": "<p>Once you&#39;ve integrated the SuperAwesome SDK, you can access all functionality by including the SuperAwesome header file:</p>\n<pre><code>#import &quot;SuperAwesome.h&quot;\n</code></pre>"
                },
                {
                    "name": "Before you start",
                    "text": "<p>One thing to note is that sometimes, even though you&#39;re accesing SuperAwesome server data through HTTPS, the actual ad content is on HTTP, which on iOS 9+ will cause issues.</p>\n<p>To circumvent this, add the following to your .plist file:</p>\n<pre><code>&lt;dict&gt;\n    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n</code></pre>"
                }
            ]
        },
        {
            "name": "Banner Ads",
            "sections": [
                {
                    "name": "Banner Ads With Interface Builder",
                    "text": "<p>To add a banner ad to your project using InterfaceBuilder, there are a couple of easy steps that you should follow.\nFirst, add a new UIView to your View Controller or view. Then, in the Identity Inspector, change it&#39;s class from UIView to SABannerView.</p>\n<p><img src=\"img/adbanner_subview.png\" alt=\"\" title=\"Setting custom class to UIView\"></p>\n<p>Second, in the Size Inspector, make sure the view&#39;s size corresponds to one of the following supported sizes:</p>\n<ul>\n<li>320x50</li>\n<li>300x50</li>\n<li>728x90 (tablet)</li>\n<li>300x250</li>\n</ul>\n<p><img src=\"img/adbanner_size.png\" alt=\"\" title=\"Setting a custom size\"></p>\n<p>Thrid, in the Attributes Inspector, you need to assign one of the Placement IDs you created in the dashboard to this ad.</p>\n<p><img src=\"img/adbanner_attributes.png\" alt=\"\" title=\"Setting attributes\"></p>\n<p>After you have done this preliminary setup, you should run your project and an ad should appear.</p>\n"
                },
                {
                    "name": "Banner Ads With Code",
                    "text": "<p>If you prefer using code in order to add banners to your app, you can use the following code snippet to do so:</p>\n<pre><code>SABannerView *bannerView = [[SABannerView alloc] initWithFrame:CGRectMake(0, 100, 320, 50)];\nbannerView.placementID = @&quot;__YOUR_PLACEMENT_ID__&quot;;\n[self.view addSubview:bannerView];\n</code></pre><p>Do not forget to replace the <code>__YOUR_PLACEMENT_ID__</code> string with one of your own placement ID, from the Dashboard.</p>\n"
                },
                {
                    "name": "Advanced Configuration",
                    "text": "<h4 id=\"implementing-sabannerviewdelegate\">Implementing SABannerViewDelegate</h4>\n<p>If you want to be notified of various events in the banner&#39;s lifecycle, then your custom class (for example MyCustomViewController) must implement the SABannerViewDelegate protocol:</p>\n<pre><code>@interface MyCustomViewController: UIViewController &lt;SABannerViewDelegate&gt;\n@property (nonatomic, strong) SABannerView *banner;\n@end\n</code></pre><p>and the SABannerView object&#39;s delegate property must be set to an object instance that implements the SABannerViewDelegate protocol, such as the MyCustomViewController.</p>\n<pre><code>@implementation MyCustomViewController\n\n- (id) init {\n    if (self = [super init]){\n        banner.delegate = self;\n    }\n    return self;\n}\n\n@end\n</code></pre><p>The SABannerViewDelegate defines four main methods, discussed below:</p>\n<pre><code>- (void) shouldSuspendForAd:(SABannerView *)view;\n</code></pre><p>Notifies the app when it should suspend its run mode, because an ad is currently playing. Useful for games or other real-time applications.</p>\n<pre><code>- (void) shouldResumeForAd:(SABannerView *)view;\n</code></pre><p>Notifies the app when it should resume its run mode, because an ad has currently stoped playing.</p>\n<pre><code>- (void) willLeaveApplicationForAd:(SABannerView *)view;\n</code></pre><p>Called when the user interaction with the ad triggers leaving the application.\nThis can be, for example, opening a URL in Safari or Maps or another application registered to handle the URL specified by the ad. You should save the state of the application when you get this call.</p>\n<pre><code>- (void) didFailShowingAd:(SABannerView *)view;\n</code></pre><p>Called when an ad fails to be fetched. Usually this happens because of networking conditions and in rare cases if an exceptions occurs on the server. You can call load to try again, if you think the conditions leading to the error have changed.</p>\n<h4 id=\"setting-the-visibility-flag-of-the-banner\">Setting the visibility flag of the banner</h4>\n<p>One last thing you need to do is keep the banners visibility flag up to date. This is important so that the banner knows when to work for you and refresh the ads and when to pause. Failing to set the visibility flag when needed, you might have your users miss important ads for their interests.</p>\n<p>You should keep the visibility flag on YES when the banner is displayed and viewable by the user, but when the banner gets off-screen (maybe through the user scrolling content and by navigating to another screen), you should set the visibility flag to NO. A good practice is to set the visibility flag is on <code>viewDidDisappear</code> and <code>viewDidAppear</code> methods.</p>\n<pre><code>- (void)viewDidDisappear:(BOOL)animated\n{\n [super viewDidDisappear:animated];\n banner.visible = NO;\n }\n\n- (void)viewDidAppear:(BOOL)animated\n{\n banner.visible = YES;\n [super viewDidAppear:animated];\n}\n</code></pre>"
                }
            ]
        },
        {
            "name": "Interstitial Ads",
            "sections": [
                {
                    "name": "Interstitial Ads With Code",
                    "text": "<p>The indicated place to load an interstitial is when you create a new screen. Depending on your needs, you might want to show the interstitial each time when you enter the screen or only once. You should start loading the interstitial inside your <code>viewDidLoad</code> method. After the interstitial is loaded (you get notified of this through the delegate) you need to call present on it to be presented.</p>\n<p>The interstitial is presented modally over the viewController you configured it with. This means that when it is presented, your <code>viewWillDisapper:</code> method gets called and <code>viewWillAppear:</code> is called when the interstitial is dismissed. It a good idea not to automatically present the interstitial on <code>viewWillAppear:</code> or to destroy it on <code>viewWillDisappear:</code>, because this will lead to infinite loop and early dismisses of the interstitial.</p>\n<pre><code>@interface ViewController ()\n@property (nonatomic,strong) SAInterstitialView *interstitial;\n@end\n\n...\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    // Do any additional setup after loading the view from its nib.\n\n    self.interstitial = [[SAInterstitialView alloc] initWithViewController:self];\n    self.interstitial.placementID = @&quot;__YOUR_PLACEMENT_ID__&quot;;\n    [self.interstitial load];\n}\n\n- (IBAction)presentInterstitionalAd:(id)sender\n{\n    [self.interstitial present];\n}\n</code></pre><p>Do not forget to replace the <code>__YOUR_PLACEMENT_ID__</code> string with your placement ID.</p>\n"
                },
                {
                    "name": "Advanced Configuration",
                    "text": "<h4 id=\"implementing-sainterstitialviewdelegate\">Implementing SAInterstitialViewDelegate</h4>\n<p>If you want to be notified of various events in the interstitial&#39;s lifecycle, then your custom class (for example MyCustomViewController) must implement the SAInterstitialViewDelegate protocol:</p>\n<pre><code>@interface MyCustomViewController: UIViewController &lt;SAInterstitialViewDelegate&gt;\n@property (nonatomic, strong) SAInterstitialView *interstitial;\n@end\n</code></pre><p>and the SAInterstitialView object&#39;s delegate property must be set to an object instance that implements the SAInterstitialViewDelegate protocol, such as the MyCustomViewController.</p>\n<pre><code>@implementation MyCustomViewController\n\n- (void) viewDidLoad {\n    ...\n    self.interstitial.delegate = self;\n}\n\n@end\n</code></pre><p>The SAInterstitialViewDelegate defines four main methods, discussed below:</p>\n<pre><code>- (void) didSuccessfullyFetchInterstitialAd:(SAInterstitialView *)interstitialView;\n</code></pre><p>Called when the interstial ad is fetched from a campaign and available to be displayed.\nYou should put up the ad on the screen at this time, by calling <code>present</code>.</p>\n<pre><code>- (void) didSuccessfullyFetchInterstitialAd:(SAInterstitialView *)interstitialView {\n    [self.interstitial present];\n}\n</code></pre><pre><code>- (void) didHideInterstitialView:(SAInterstitialView *)interstitialView;\n</code></pre><p>The ad was hidden from view. It gets called either when the ad is dismissed by the user or the refresh timer fires for the ad. You should take down the interstitial ad from the screen at this time.</p>\n<pre><code>- (void) willLeaveApplicationForInterstitialAd:(SAInterstitialView *)interstitialView;\n</code></pre><p>Called when the user interaction with the ad triggers leaving the application.\nThis can be, for example, opening a URL in Safari or Maps or another application registered to handle the URL specified by the ad. You should save the state of the application when you get this call.</p>\n<pre><code>- (void) didFailFetchingInterstitialAd:(SAInterstitialView *)interstitialView;\n</code></pre><p>Called when an ad fails to be fetched. Usually this happens because of networking conditions and in rare cases if an exceptions occurs on the server. You can call load to try again, if you think the conditions leading to the error have changed.</p>\n"
                }
            ]
        },
        {
            "name": "Video Ads",
            "sections": [
                {
                    "name": "Video Ads With Interface Builder",
                    "text": "<p>In order to use video ads in your app, first you have to add a preroll placement on the <a href=\"http://dashboard.superawesome.tv\">Dashboard</a>. Then, go to your xib file and add a UIView object to the view. In the Identity Inspector pane set the class of the view to SAVideoAdView.</p>\n<p><img src=\"img/video_ad.png\" alt=\"\" title=\"Adding Video Ad in Interface Builder\"></p>\n<p>Set your App ID and Placement ID in the Attributes Inspector pane and if you wish to enable autoplay set the Autoplay setting to On.</p>\n<p>To start the video ad playback programatically call the <code>play</code> method on the SAVideoAdView. By implementing the SAVideoAdViewDelegate protocol your app can react to events that are emitted by the SAVideoAdView instance.</p>\n"
                },
                {
                    "name": "Video Ads With Code",
                    "text": "<p>If you prefer using code in order to add video ads to your app, you can use the following code snippet to do so:</p>\n<pre><code>@interface ViewController ()\n@property (nonatomic,strong) SAVideoAdView *videoAdView;\n@end\n\n...\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    // Do any additional setup after loading the view from its nib.\n\n    self.videoAdView = [[SAVideoAdView alloc] initWithFrame:CGRectMake(0, 0, 320, 200)];\n    self.videoAdView.placementID = @&quot;__YOUR_PLACEMENT_ID__&quot;;\n    self.videoAdView.autoplay = YES;\n    [self.view addSubview:self.videoAdView];\n}\n</code></pre><p>Do not forget to replace the <code>__YOUR_PLACEMENT_ID__</code> string with your placement ID.</p>\n"
                },
                {
                    "name": "Fullscreen Video Ads",
                    "text": "<p>If you just want to display a fullscreen video ad and not to worry about the delegate protocol, this is the easiest way to show a video ad:</p>\n<pre><code>SAVideoAdViewController *vc = [[SAVideoAdViewController alloc] initWithPlacementID:@&quot;__PLACEMENT_ID__&quot;];\n[self presentViewController:vc animated:YES completion:nil];\n</code></pre><p>Do not forget to replace the <code>__YOUR_PLACEMENT_ID__</code> string with your placement ID.</p>\n<p>The view controller will handle all the errors and will dismiss itself when the ad finishes.</p>\n"
                },
                {
                    "name": "Advanced Configuration",
                    "text": "<h4 id=\"implementing-savideoadviewdelegate\">Implementing SAVideoAdViewDelegate</h4>\n<p>If you want to be notified of various events in the vide ad&#39;s lifecycle, you can set its delegate to an object instance that implements the SAVideoAdViewDelegate protocol.</p>\n<p>The following methods are available in the protocol:</p>\n<pre><code>- (void)didLoadVideoAd:(SAVideoAdView *)videoAd;\n- (void)didFailToLoadVideoAd:(SAVideoAdView *)videoAd;\n\n- (void)didStartPlayingVideoAd:(SAVideoAdView *)videoAd;\n- (void)didFinishPlayingVideoAd:(SAVideoAdView *)videoAd;\n- (void)didFailToPlayVideoAd:(SAVideoAdView *)videoAd;\n- (void)didClickVideoAd:(SAVideoAdView *)videoAd;\n</code></pre>"
                }
            ]
        },
        {
            "name": "Parental Gate",
            "text": "<p>Parental gates are used in apps targeted towards kids to prevent them from engaging in commerce or following links out of an app to websites, social networks, or other apps without the knowledge of their parent or guardian. A parental gate presents an adult level task which must be completed in order to continue.</p>\n<p>You can enable our parental gate on banners, interstitials and video views. You can either enable it in Interface Builder or by using the following code in your project:</p>\n<pre><code>[adView setParentalGateEnabled:YES];\n</code></pre><p><img src=\"img/parental_gate.png\" alt=\"\" title=\"Parental Gate on iOS\"></p>\n"
        },
        {
            "name": "Technical Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        },
        {
            "name": "License",
            "text": "<p>See the LICENSE.txt file for more information.</p>\n"
        }
    ]
}